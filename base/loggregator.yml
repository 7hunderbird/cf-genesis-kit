---
instance_groups:
- name: doppler
  jobs:
  - { name: consul_agent,        release: consul, consumes: { consul: { from: consul_server }}}
  - { name: doppler,             release: loggregator }
  - { name: syslog_drain_binder, release: loggregator }
  - { name: metron_agent,        release: loggregator }
  - { name: toolbelt,            release: toolbelt }
  - { name: toolbelt-quick,      release: toolbelt }
  properties:
    consul:
      agent:
        services:
          doppler: { name: doppler }

- name: loggregator_trafficcontroller
  jobs:
  - { name: consul_agent,                  release: consul, consumes: { consul: { from: consul_server }}}
  - { name: loggregator_trafficcontroller, release: loggregator }
  - { name: route_registrar,               release: routing }
  - { name: metron_agent,                  release: loggregator }
  - { name: toolbelt,                      release: toolbelt }
  - { name: toolbelt-quick,                release: toolbelt }
  properties:
    loggregator:
      uaa:
        client_secret: (( grab meta.uaa.doppler_secret ))
    consul:
      agent:
        services:
          loggregator_trafficcontroller: {}
    route_registrar:
      routes:
      - name: loggregator
        port: 8080
        registration_interval: 20s
        uris:
        - (( concat "loggregator." params.system_domain ))
      - name: doppler
        port: 8081
        registration_interval: 20s
        uris:
        - (( concat "doppler." params.system_domain ))
        - (( concat "*.doppler." params.system_domain ))

meta:
  loggregator:
    endpoint_secret:        (( vault meta.vault "/loggregator/endpoint:secret" ))

properties:
  doppler:
    etcd: (( grab meta.cf-etcd ))
  loggregator:
    etcd: (( grab meta.cf-etcd ))
    tls:
      ca_cert:                (( vault meta.vault "/loggregator/certs/ca:certificate" ))
      doppler:
        cert:           (( vault meta.vault "/loggregator/certs/doppler:certificate" ))
        key:            (( vault meta.vault "/loggregator/certs/doppler:key" ))
      trafficcontroller:
        cert: (( vault meta.vault "/loggregator/certs/trafficcontroller:certificate" ))
        key:  (( vault meta.vault "/loggregator/certs/trafficcontroller:key" ))
      metron:
        cert:            (( vault meta.vault "/loggregator/certs/metron:certificate" ))
        key:             (( vault meta.vault "/loggregator/certs/metron:key" ))
      syslogdrainbinder:
        cert: (( vault meta.vault "/diego/certs/syslogdrainbinder:certificate" ))
        key:  (( vault meta.vault "/diego/certs/syslogdrainbinder:key" ))
      statsdinjector:
        cert:    (( vault meta.vault "/loggregator/certs/statsdinjector:certificate" ))
        key:     (( vault meta.vault "/loggregator/certs/statsdinjector:key" ))
  metron_agent:
    deployment: (( grab name ))
    etcd: (( grab meta.cf-etcd ))
  traffic_controller:
    etcd: (( grab meta.cf-etcd ))
  syslog_drain_binder:
    etcd: (( grab meta.cf-etcd ))
  doppler_endpoint:
    shared_secret: (( grab meta.loggregator.endpoint_secret ))
  loggregator_endpoint:
    shared_secret: (( grab meta.loggregator.endpoint_secret ))
  metron_endpoint:
    shared_secret: (( grab meta.loggregator.endpoint_secret ))
  logger_endpoint:
    port: (( grab params.logger_port ))

  statsd_injector:
    deployment: (( grab params.system_domain ))
