---
instance_groups:
- name: uaa
  jobs:
  - { name: consul_agent,    release: cf }
  - { name: uaa,             release: cf }
  - { name: metron_agent,    release: cf }
  - { name: route_registrar, release: cf }
  - { name: statsd-injector, release: cf }
  - { name: toolbelt,        release: toolbelt }
  - { name: toolbelt-quick,  release: toolbelt }

  properties:
    consul:
      agent:
        services:
          uaa: {}
    route_registrar:
      routes:
      - name: uaa
        port: 8080
        registration_interval: 4s
        tags:
          component: uaa
        uris:
        - (( concat "uaa." params.system_domain ))
        - (( concat "*.uaa." params.system_domain ))
        - (( concat "login." params.system_domain ))
        - (( concat "*.login." params.system_domain ))
        health_check:
          name: uaa-healthcheck
          script_path: /var/vcap/jobs/uaa/bin/health_check

meta:
  admin:
    user:     admin
    password: (( vault meta.vault "/admin_user:password" ))

  uaa:
    admin_client_secret:   (( vault meta.vault "/uaa/client_secrets:admin_client" ))
    cc_client_secret:      (( vault meta.vault "/uaa/client_secrets:cc_client" ))
    cc_broker_secret:      (( vault meta.vault "/uaa/client_secrets:cc_broker" ))
    cc_routing_secret:     (( vault meta.vault "/uaa/client_secrets:cc_routing" ))
    cc_user_lookup_secret: (( vault meta.vault "/uaa/client_secrets:cc_user_lookup" ))
    login_secret:          (( vault meta.vault "/uaa/client_secrets:login" ))
    doppler_secret:        (( vault meta.vault "/uaa/client_secrets:doppler" ))
    firehose_secret:       (( vault meta.vault "/uaa/client_secrets:firehose" ))
    gorouter_secret:       (( vault meta.vault "/uaa/client_secrets:gorouter" ))
    notifications_secret:  (( vault meta.vault "/uaa/client_secrets:notifications" ))
    ssh_proxy_secret:      (( vault meta.vault "/uaa/client_secrets:ssh_proxy" ))
    tcp_emitter_secret:    (( vault meta.vault "/uaa/client_secrets:tcp_emitter" ))
    tcp_router_secret:     (( vault meta.vault "/uaa/client_secrets:tcp_router" ))

    jwt_private_key:       (( vault meta.vault "/uaa/jwt_signing_key:private" ))
    jwt_public_key:  (( vault meta.vault "/uaa/jwt_signing_key:public" ))
    ssl_cert:        (( vault meta.vault "/uaa/ssl:cert" ))
    ssl_key:         (( vault meta.vault "/uaa/ssl:key" ))

  login:
    saml:
      service_provider_certificate: (( grab meta.uaa.ssl_cert ))
      service_provider_key:         (( grab meta.uaa.ssl_key ))

properties:
  uaa:
    admin:
      client_secret: (( grab meta.uaa.admin_client_secret ))
    authentication:
      policy:
        countFailuresWithinSeconds: null
        lockoutAfterFailures: null
        lockoutPeriodSeconds: null
    password:
      policy:
        minLength: null
        requireUpperCaseCharacter: null
        requireLowerCaseCharacter: null
        requireDigit: null
        requireSpecialCharacter: null
    ca_cert: null
    catalina_opts: -Xmx192m -XX:MaxPermSize=128m
    cc:
      client_secret: (( grab meta.uaa.cc_client_secret ))
    clients:
      cc-service-dashboards:
        authorities: clients.read,clients.write,clients.admin
        authorized-grant-types: authorization_code,client_credentials
        scope: openid,cloud_controller_service_permissions.read
        secret: (( grab meta.uaa.cc_broker_secret ))
      cc_routing:
        authorities: routing.router_groups.read
        authorized-grant-types: client_credentials
        secret: (( grab meta.uaa.cc_routing_secret ))
      cf:
        access-token-validity: 600
        authorities: uaa.none
        authorized-grant-types: password,refresh_token
        override: true
        refresh-token-validity: 604800
        scope: cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read,routing.router_groups.write
      cloud_controller_username_lookup:
        authorities: scim.userids
        authorized-grant-types: client_credentials
        secret: (( grab meta.uaa.cc_user_lookup_secret ))
      doppler:
        authorities: uaa.resource
        override: true
        secret: (( grab meta.uaa.doppler_secret ))
      firehose:
        authorities: doppler.firehose
        authorized-grant-types: client_credentials,refresh_token
        secret: (( grab meta.uaa.firehose_secret ))
      gorouter:
        authorities: routing.routes.read
        authorized-grant-types: client_credentials,refresh_token
        secret: (( grab meta.uaa.gorouter_secret ))
      login:
        authorities: oauth.login,scim.write,clients.read,notifications.write,critical_notifications.write,emails.write,scim.userids,password.write
        authorized-grant-types: authorization_code,client_credentials,refresh_token
        autoapprove: true
        override: true
        redirect-uri: (( concat "https://login." params.system_domain ))
        scope: openid,oauth.approvals
        secret: (( grab meta.uaa.login_secret ))
      notifications:
        authorities: cloud_controller.admin,scim.read
        authorized-grant-types: client_credentials
        secret: (( grab meta.uaa.notifications_secret ))
      ssh-proxy:
        authorized-grant-types: authorization_code
        autoapprove: true
        override: true
        redirect-uri: /login
        scope: openid,cloud_controller.read,cloud_controller.write,cloud_controller.admin
        secret: (( grab meta.uaa.ssh_proxy_secret ))
      tcp_emitter:
        authorities: routing.routes.write,routing.routes.read,routing.router_groups.read
        authorized-grant-types: client_credentials,refresh_token
        secret: (( grab meta.uaa.tcp_emitter_secret ))
      tcp_router:
        authorities: routing.routes.read,routing.router_groups.read
        authorized-grant-types: client_credentials,refresh_token
        secret: (( grab meta.uaa.tcp_router_secret ))
    database: null
    issuer: (( concat "https://uaa." params.system_domain ))
    jwt:
      signing_key: (( grab meta.uaa.jwt_private_key ))
      verification_key: (( grab meta.uaa.jwt_public_key ))
    ldap: null
    login: null
    newrelic: null
    no_ssl: null
    port: 8080
    require_https: true
    scim:
      external_groups: null
      groups: null
      userids_enabled: true
      users:
        - name:     (( grab meta.admin.user ))
          password: (( grab meta.admin.pass ))
          groups:
            - scim.write
            - scim.read
            - openid
            - cloud_controller.admin
            - clients.read
            - clients.write
            - doppler.firehose
            - routing.router_groups.read
            - routing.router_groups.write
    ssl:
      port: 8443
    sslCertificate: (( grab meta.uaa.ssl_cert ))
    sslPrivateKey: (( grab meta.uaa.ssl_key ))
    url: (( concat "https://uaa." params.system_domain ))
    user:
      authorities:
        - openid
        - scim.me
        - cloud_controller.read
        - cloud_controller.write
        - cloud_controller_service_permissions.read
        - password.write
        - uaa.user
        - approvals.me
        - oauth.approvals
        - notification_preferences.read
        - notification_preferences.write
        - profile
        - roles
        - user_attributes
        - cloud_controller.user
        - actuator.read
    zones:
      internal:
        hostnames:
        - uaa.service.cf.internal

  login:
    analytics:
      code: null
      domain: null
    asset_base_url: null
    brand: oss
    catalina_opts: null
    enabled: true
    links:
      passwd: (( concat "https://login." params.system_domain "/forgot_password" ))
      signup: (( concat "https://login." params.system_domain "/create_account" ))
    logout: null
    messages: null
    notifications:
      url: null
    protocol: null
    saml:
      serviceProviderKey: (( grab meta.login.saml.service_provider_key ))
      serviceProviderKeyPassword: ""
      serviceProviderCertificate: (( grab meta.login.saml.service_provider_certificate ))
    self_service_links_enabled: null
    smtp:
      host: null
      password: null
      port: null
      user: null
    url: null
