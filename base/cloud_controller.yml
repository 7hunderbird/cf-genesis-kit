---
instance_groups:
- name: api
  jobs:
  - { name: consul_agent,            release: consul, consumes: { consul: { from: consul_server }}}
  - { name: java-buildpack,          release: java-buildpack }
  - { name: java-offline-buildpack,  release: java-offline-buildpack }
  - { name: go-buildpack,            release: go-buildpack }
  - { name: binary-buildpack,        release: binary-buildpack }
  - { name: nodejs-buildpack,        release: nodejs-buildpack }
  - { name: ruby-buildpack,          release: ruby-buildpack }
  - { name: php-buildpack,           release: php-buildpack }
  - { name: python-buildpack,        release: python-buildpack }
  - { name: staticfile-buildpack,    release: staticfile-buildpack }
  - { name: dotnet-core-buildpack,   release: dotnet-core-buildpack }
  - { name: cloud_controller_ng,     release: capi }
  - { name: cloud_controller_worker, release: capi }
  - { name: cloud_controller_clock,  release: capi }
  - { name: metron_agent,            release: loggregator }
  - { name: statsd_injector,         release: statsd-injector }
  - { name: route_registrar,         release: routing }
  - { name: toolbelt,                release: toolbelt }
  - { name: toolbelt-quick,          release: toolbelt }
  properties:
    consul:
      agent:
        services:
          cloud_controller_ng: {}
    route_registrar:
      routes:
      - name: api
        port: 9022
        registration_interval: 20s
        tags:
          component: CloudController
        uris:
        - (( concat "api." params.system_domain ))

meta:
  cc:
    ca:                      (( vault meta.vault "/ca:cap-em" ))
    directory_key:           (( vault meta.vault "/cc:directory_key" ))
    bulk_api_user:           bulk_api_user
    bulk_api_password:       (( vault meta.vault "/cc:bulk_api" ))
    internal_api_user:       internal_api_user
    internal_api_password:   (( vault meta.vault "/cc:internal_api" ))
    staging_upload_user:     staging_upload_user
    staging_upload_password: (( vault meta.vault "/cc:staging_upload" ))
    db_encryption_key:       (( vault meta.vault "/cc:db_encryption_key" ))

  ccdb:
    host: (( grab params.ccdb_host ))
    port: (( param "What port is the ccdb listening on?" ))
    scheme: (( param "Specify the type of database the ccdb is (postgres, mysql)" ))
    user: (( param "Specify the user to connect to the ccdb" ))
    pass:  (( param "Specify the password of the ccdb user" ))
    dbname: (( grab params.ccdb_name ))

properties:
  ccdb:
    address: (( grab meta.ccdb.host ))
    databases:
    - name: (( grab meta.ccdb.dbname ))
      citext: true
      tag: cc
    db_scheme: (( grab meta.ccdb.scheme ))
    port: (( grab meta.ccdb.port ))
    roles:
    - name: (( grab meta.ccdb.user ))
      password: (( grab meta.ccdb.password ))
      tag: admin

  cc:
    mutual_tls:
      ca_cert: (( grab meta.cc.ca ))
      public_cert: (( vault meta.vault "/capi:cert" ))
      private_key: (( vault meta.vault "/capi:key" ))
    broker_client_timeout_seconds: 70
    buildpacks:
      .: (( inject meta.blobstore_config ))
      buildpack_directory_key: (( concat params.env "-cc-buildpacks-" meta.cc.directory_key ))
    bulk_api_password: (( grab meta.cc.bulk_api_password ))
    db_encryption_key: (( grab meta.cc.db_encryption_key ))
    db_logging_level: info
    default_app_memory: (( grab params.default_app_memory ))
    default_running_security_groups:
    - public_networks
    - dns
    - services
    - load_balancer
    default_staging_security_groups:
    - public_networks
    - dns
    - services
    - load_balancer
    default_to_diego_backend: true
    droplets:
      .: (( inject meta.blobstore_config ))
      droplet_directory_key: (( concat params.env "-cc-buildpacks-" meta.cc.directory_key ))
      max_staged_droplets_stored: null
    install_buildpacks:
    - name: staticfile_buildpack
      package: staticfile-buildpack
    - name: java_buildpack
      package: java-buildpack
    - name: ruby_buildpack
      package: ruby-buildpack
    - name: nodejs_buildpack
      package: nodejs-buildpack
    - name: go_buildpack
      package: go-buildpack
    - name: python_buildpack
      package: python-buildpack
    - name: php_buildpack
      package: php-buildpack
    - name: binary_buildpack
      package: binary-buildpack
    - name: dotnet_core_buildpack
      package: dotnet-core-buildpack
    internal_api_password: (( grab meta.cc.internal_api_password ))
    internal_api_user: (( grab meta.cc.internal_api_user ))
    logging_level: info
    packages:
      .: (( inject meta.blobstore_config ))
      app_package_directory_key: (( concat params.env "-cc-buildpacks-" meta.cc.directory_key ))
    quota_definitions:
      default:
        memory_limit: 102400
        non_basic_services_allowed: true
        total_reserved_route_ports: -1
        total_routes: 1000
        total_service_keys: 1000
        total_services: 100
    resource_pool:
      .: (( inject meta.blobstore_config ))
      resource_directory_key: (( concat params.env "-cc-buildpacks-" meta.cc.directory_key ))
    security_group_definitions:
    - name: public_networks
      rules:
      - destination: 0.0.0.0-9.255.255.255
        protocol: all
      - destination: 11.0.0.0-169.253.255.255
        protocol: all
      - destination: 169.255.0.0-172.15.255.255
        protocol: all
      - destination: 172.32.0.0-192.167.255.255
        protocol: all
      - destination: 192.169.0.0-255.255.255.255
        protocol: all
    - name: dns
      rules:
      - destination: 0.0.0.0/0
        ports: "53"
        protocol: tcp
      - destination: 0.0.0.0/0
        ports: "53"
        protocol: udp
    - name: services
      rules: (( param "Specify the rules for allowing access to CF services subnets" ))
    - name: load_balancer
      rules: (( param "Specify the rules for allowing access for CF apps to talk to the CF Load Balancer External IPs" ))
    srv_api_uri: (( concat "https://api." params.system_domain ))
    staging_upload_password: (( grab meta.cc.staging_upload_password ))
    staging_upload_user: (( grab meta.cc.staging_upload_user ))
    volume_services_enabled: true
