---
name: Cloud Foundry
version: 0.0.1
author: Geoff Franks <gfranks@starkandwayne.com>
homepage: https://github.com/genesis-community/cf-genesis-kit
github: https://github.com/genesis-community/cf-genesis-kit

description: |
  This kit will deploy OSS Cloud Foundry to BOSH. It contains
  subkits to help identify where your databases and blobstore are,
  customizations for Azure environments, and to enable an appropriate
  HA Proxy configuration if desired. It is loosely based off of the
  [cf-deployment](https://github.com/cloudfoundry/cf-deployment) repo.

subkits:
  - prompt: Are you deploying Cloud Foundry on Azure?
    subkit: azure
    default: no
  - prompt: What database backend will you use for uaadb, ccdb, and diegob?
    type: database backend
    choices:
      - subkit: db-external-mysql
        label: An MySQL databases deployed externally to Cloud Foundry (e.g. RDS)
      - subkit: db-external-postgres
        label: A Postgres databases deployed externally to Cloud Foundry (e.g. RDS)
      - subkit: db-ha-postgres
        label: I do not have external databases to offer Cloud Foundry
  - prompt: What blobstore backend will you use for CloudFoundry?
    type: blobstore backend
    choices:
      - subkit: blobstore-s333
        label: Amazon S3
      - subkit: blobstore-azure
        label: Azure Blobstore
      - subkit: blobstore-gcp
        label: Google Cloud Platform Blobstore
      - subkit: blobsore-webdav
        label: A single-point-of-failure WebDAV server deployed alongside CF via BOSH
  - prompt: |
      Do you need to include an HA Proxy configuration in front of Cloud Foundry?
      Common reasons for doing so include:

      - Deploying to an IaaS that does not provide a built-in load-balancing option,
        and not having hardware load balancers to use
      - You have multiple app domains pointing to Cloud Foundry, and each require
        unique SSL certificates, and your IaaS load balancer doesn't support SNI
      - You have domains hosted in Cloud Foundry that should be restricted to
        internal-only traffic
    type: haproxy backend
    choices:
      - subkit: haproxy-notls
        label: I need HA Proxy installed with Cloud Foundry, but will terminate SSL connections before they are sent to HA Proxy
      - subkit: haproxy-tls
        label: I need HA Proxy installed with Cloud Foundry, and HA Proxy will terminate SSL
      - subkit: omit-haproxy
        label: I will be using IaaS-provided load balancer doing SSL termination
  - prompt: Do you wish to enable Zipkin Tracing support for Cloud Foundry? (Requires separate Zipkin server)
    subkit: zipkin
    default: no
  - prompt: Do you wish to send Cloud Foundry metrics to NewRelic? (Requires separate NewRelic account)
    subkit: newrelic
    default: no

certificates:
  base:
    consul/certs:
      ca: { age: 1y }
      server:
        age: 1y
        sans: [ server.dc1.cf.internal ]
      agent:
        age: 1y
        sans: [ consul_agent ]

    etcd/certs:
      ca: { age: 1y }
      client:
        age: 1y
        sans: [ clientName ]
      server:
        age: 1y
        sans: [ "cf-etcd.service.cf.internal", "*.cf-etcd.service.cf.internal" ]
    etcd/peer_certs:
      ca: { age: 1y }
      peer:
        age: 1y
        sans: [ "cf-etcd.service.cf.internal", "*.cf-etcd.service.cf.internal" ]

    uaa/certs:
      ca: { age: 1y }
      server:
        age: 1y
        sans: [ "uaa.service.cf.internal", "*.uaa.service.cf.internal", "*.uaa.${params.system_domain}", "uaa.${params.system_domain}", "login.${params.system_domain}", "*.login.${params.system_domain}" ]

    diego/certs:
      ca: { age: 1y }
      capi:
        age: 1y
        sans: [ "cloud-controller-ng.service.cf.internal" ]
      syslogdrainbinder:
        age: 1y
        sans: [ "syslogdrainbinder" ]
      bbs:
        age: 1y
        sans: [ "bbs.service.cf.internal", "*.bbs.service.cf.internal" ]
      bbs_client:
        age: 1y
        sans: [ "bbs client" ]
      tps_cient:
        age: 1y
        sans: [ "tps client" ]
      rep:
        age: 1y
        sans: [ "cell.service.cf.internal", "*.cell.service.cf.internal" ]
      rep_client:
        age: 1y
        sans: [ "rep client" ]
      auctioneer:
        age: 1y
        sans: [ "auctioneer.service.cf.internal" ]
      auctioneer_client:
        age: 1y
        sans: [ "auctioneer client" ]

    loggregator/certs:
      ca: { age: 1y }
      doppler:
        age: 1y
        sans: [ "doppler" ]
      metron:
        age: 1y
        sans: [ "metron" ]
      trafficcontroller:
        age: 1y
        sans: [ "trafficcontroller" ]
      reverselogproxy:
        age: 1y
        sans: [ "reverselogproxy" ]
      statsdinjector:
        age: 1y
        sans: [ "statsdinjector" ]

  blobstore-webdav:
    ca: { age: 1y }
    server:
      age: 1y
      sans: [ "blobstore.service.cf.internal" ]

credentials:
  base:
    consul/encryption_key:
      current: random 64 fixed #FIXME: rotation requires old + new present and manual key rotation

    nats:
      password: random 64

    admin_user:
      password: random 64

    uaa/jwt_signing_key: rsa 4096 fixed
    uaa/client_secrets:
      admin_client:   random 64
      cc_broker:      random 64
      cc_routing:     random 64
      cc_user_lookup: random 64
      # FIXME remove this after verifying we don't need it
      #    login:          random 64
      doppler:        random 64
      gorouter:       random 64
      notifications:  random 64
      ssh_proxy:      random 64
      tcp_emitter:    random 64
      tcp_router:     random 64

    cc:
      directory_key:     random 16 fixed
      bulk_api:          random 64
      internal_api:      random 64
      staging_upload:    random 64
      db_encryption_key: random 64 fixed

    loggregator/endpoint:
      secret: random 64

    gorouter/route_services:
      secret: random 64
    gorouter/status:
      password: random 64

    diego/encryption_key:
      value: random 64 fixed

    ssh_proxy/host_key: ssh 2048

  blobstore-webdav:
    blobstore/creds:
      password: random 64
      secret:   random 64

  blobstore-azure:
    blobstore:
      azurerm_sa_name: ask "Please enter the Azure Storage Account Name to be used for the Cloud Controller blobstore" fixed
      azurerm_sa_key: ask "Please enter the Azure Storage Account Key to be used for the Cloud Controller blobstore" fixed

  blobstore-gcp:
    blobstore:
      gcp_sa_key: ask "Please enter the GCP Storage Access Key ID to be used for the Cloud Controller blobstore" fixed
      gcp_sa_secret: ask "Please enter the GCP Storage Access Secret Key to be used for the Cloud Controller blobstore" fixed

  blobstore-s3:
    blobstore:
      aws_access_key: ask "Please enter the AWS Access Key ID to be used for the Cloud Controller blobstore" fixed
      aws_access_secret: ask "Please enter the AWS Secret Access Key to be used for the Cloud Controller blobstore" fixed

  haproxy-tls:
    haproxy:
      ssl: ask "Please enter the SSL PEM (cert + key) for your Cloud Foundry's public Domains" fixed

  db-external-mysql:
    uaadb:
      user: ask "What is the username used to connect to the UAA Database?" fixed
      password: ask "What is the password used to connect to the UAA Database?" fixed
    ccdb:
      user: ask "What is the username used to connect to the CC Database?" fixed
      password: ask "What is the password used to connect to the CC Database?" fixed
    diegodb:
      user: ask "What is the username used to connect to the Diego Database?" fixed
      password: ask "What is the password used to connect to the Diego Database?" fixed
  db-external-postgres:
    uaadb:
      user: ask "What is the username used to connect to the UAA Database?" fixed
      password: ask "What is the password used to connect to the UAA Database?" fixed
    ccdb:
      user: ask "What is the username used to connect to the CC Database?" fixed
      password: ask "What is the password used to connect to the CC Database?" fixed
    diegodb:
      user: ask "What is the username used to connect to the Diego Database?" fixed
      password: ask "What is the password used to connect to the Diego Database?" fixed

  db-ha-posgres:
    uaadb:
      password: random 64
    ccdb:
      password: random 64
    diegodb:
      password: random 64
