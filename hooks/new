#!/bin/bash
set -eu

use_db=
use_lb=
use_blobstore=
use_provided_cert=

declare -a features
features=()

move_secrets_to_credhub() {
  local value src="$1" dst="$2"
  value="$(safe get "${GENESIS_SECRETS_BASE}$src")"
  credhub set -n "/$GENESIS_CREDHUB_ROOT/$dst" -t value -v "$value"
  safe rm "${GENESIS_SECRETS_BASE}$src"
}

ask_for_loadbalancer() {
  load_balancer= # Assigned below
  prompt_for load_balancer "select" \
    'What load balancer would you like to use in front of this Cloud Foundry?' \
    -o "[external] An existing ${1:-"external Load Balancer"}" \
    -o '[haproxy] An internal HAProxy Load Balancer' \
    -d 'external'
  if [[ $load_balancer == 'external' ]]; then
    return
  fi

  features+=( "cf-deployment/operations/haproxy" );
  cert= # Assigned below
  prompt_for cert "select" \
    'Cloud Foundry requires a TLS certificate to support HTTPS traffic.' \
    -o '[provide]  I have a signed X.509 certificate for Cloud Foundry' \
    -o '[generate] Please generate a new, self-signed certificate for Cloud Foundry'

  if [[ "$cert" == "provide" ]] ; then
    use_provided_cert=yes
    while true; do
      prompt_for haproxy/ssl:certificate secret-block \
        'Please provide the X.509 Certificate (and CA chain, if any), in PEM format'
      prompt_for haproxy/ssl:key secret-block \
        'Please provide the private key for that certificate'

      safe x509 validate "${GENESIS_SECRETS_BASE}haproxy/ssl"
      safe x509 show "${GENESIS_SECRETS_BASE}haproxy/ssl"
      prompt_for ok boolean 'Is this the correct certificate?'
      [[ $ok == 'true' ]] && break
    done
    echo

    credhub set -n "${GENESIS_CREDHUB_ROOT}/router_ssl" -t certificate -r /dev/null \
      -c <(safe read "${GENESIS_SECRETS_BASE}haproxy/ssl:certificate" | sed -e '/^$/d') \
      -p <(safe read "${GENESIS_SECRETS_BASE}haproxy/ssl:key"         | sed -e '/^$/d')

    safe rm "${GENESIS_SECRETS_BASE}haproxy/ssl"
  fi
}

## TODO: Convert to genesis v2.7.7 and credhub below {{{

## TODO: figure out how to map these features to cf-deployment ops files, and 
##       add any glue files to populate variables as overlay or operations
##       files.  See sample for azure blobstore on line 132 of hooks/blueprint
##       for example of how they are consumed
ask_for_database() {
  inst=database
  case "${1:-}" in
  rds)
    prompt_for database select \
      'Where would you like to house Cloud Foundry configuration and metadata?' \
      -o '[postgres-db]  PostgreSQL Amazon RDS' \
      -o '[mysql-db]     MySQL Amazon RDS' \
      -o '[local-db]     an internal database node (not HA)' \
      -o '[local-ha-db]  internal HA database cluster'

    case $database in
    postgres-db) inst="Amazon RDS PostgreSQL instance" ;;
    mysql-db)    inst="Amazon RDS MySQL instance" ;;
    esac
    use_db=$database
    ;;

  gcp)
    prompt_for database select \
      'Where would you like to house Cloud Foundry configuration and metadata?' \
      -o '[postgres-db]  PostgreSQL Google Cloud SQL' \
      -o '[mysql-db]     MySQL Google Cloud SQL' \
      -o '[local-db]     an internal database node (not HA)' \
      -o '[local-ha-db]  internal HA database cluster'

    case $database in
    postgres-db) inst="Google Cloud SQL PostgreSQL instance" ;;
    mysql-db)    inst="Google Cloud SQL MySQL instance" ;;
    esac
    use_db=$database
    ;;

  '')
    prompt_for database select \
      'Where would you like to house Cloud Foundry configuration and metadata?' \
      -o '[postgres-db]  External PostgreSQL Database' \
      -o '[mysql-db]     External MySQL Database' \
      -o '[local-db]     an internal database node (not HA)' \
      -o '[local-ha-db]  internal HA database cluster'

    case $database in
    postgres-db) inst="external PostgreSQL instance" ;;
    mysql-db)    inst="external MySQL instance" ;;
    esac
    use_db=$database
    ;;

  *)
    echo >&2 "Unknown database ask type $1"
    exit 1
    ;;
  esac


  case $database in
  mysql-db|postgres-db)
    prompt_for db_host line \
      "What is the hostname or IP of your $inst?"
    prompt_for db_user line \
      "What is your $inst database username?"
    prompt_for $GENESIS_VAULT_PREFIX/external_db:password secret-line \
      "What is the password for the $inst $db_user user?"
    safe --quiet set secret/$GENESIS_VAULT_PREFIX/external_db username="$db_user"
    ;;
  local-ha-db)
    prompt_for postgres_vip line \
      "What VIP would you like to use?"
    ;;
  esac
}
# }}}

### ----------------------------------------------------------------------------
### Main
### ----------------------------------------------------------------------------

# IaaS selection
params=''
iaas= # Assigned below
prompt_for iaas "select" \
  'What IaaS are you deploying to?' \
  -o '[aws]       Amazon Web Services'   \
  -o '[azure]     Microsoft Azure'       \
  -o '[google]    Google Cloud Platform' \
  -o '[other]     Other (OpenStack, vSphere, etc.)'

# Iaas: Azure
case "$iaas" in
azure)
  ask_for_loadbalancer "Azure Load Balancer"
  ask_for_database

  ## This block has been updated with pattern for credhub/cf-deployment ops files
  use_azure_storage= # Assigned below
  prompt_for use_azure_storage boolean \
    'Would you like to use Azure Storage to store droplets and application bits?'
  if [[ $use_azure_storage == 'true' ]]; then
    use_blobstore=azure
    # Workaround until Credhub is first-class supported
    prompt_for "${GENESIS_SECRETS_BASE}blobstore:storage_account_name" secret-line \
      'What is your Azure Storage Account Name?'
    prompt_for "${GENESIS_SECRETS_BASE}blobstore:storage_access_key" secret-line \
      'What is your Azure Storage Account Key?'

    # Workaround until kits can prompt into Credhub
    move_secrets_to_credhub blobstore:storage_account_name blobstore_storage_account_name
    move_secrets_to_credhub blobstore:storage_access_key   blobstore_storage_access_key
  fi
  ;;

aws)
  ask_for_loadbalancer "Elastic Load Balancer"
  ask_for_database rds

  prompt_for use_aws_stuff boolean \
    'Would you like to use Amazon S3 to store droplets and application bits?'
  if [[ $use_aws_stuff == 'true' ]]; then
    use_blobstore=aws
    prompt_for blobstore:aws_access_key secret-line \
      'What is your Amazon S3 Access Key ID?'
    prompt_for blobstore:aws_access_secret secret-line \
      'What is your Amazon S3 Secret Access Key?'
    prompt_for aws_blobstore_region "line" \
      'What region contains the your Amazon S3 blobstore?'

    move_secrets_to_credhub blobstore:aws_access_key    blobstore_access_key_id
    move_secrets_to_credhub blobstore:aws_access_secret blobstore_secret_access_key
  fi
  ;;

google)
  ask_for_loadbalancer "Google Cloud Load Balancer"
  ask_for_database gcp

  use_gcp_blobstore= # Assigned below
  prompt_for use_gcp_blobstore "select" \
    'What would you like to use to store droplets, buildpacks and application bits?' \
    -o '[gcp] Existing Google Cloud Storage accessed via project and json key' \
    -o '[gcpaccess] Existing Google Cloud Storage accessed via access and secret keys' \
    -o '[builtin] Local singleton blobstore that will be deployed in this deployment' \
    -d 'gcp'

  case "$use_gcp_blobstore" in
  gcp)
    use_blobstore=gcp
    prompt_for blobstore:gcp_project_name secret-line \
      'What is your Google Cloud Project Name?'
    prompt_for blobstore:gcp_client_email secret-line \
      'What is the Cloud Storage Service Account ID (@<project>.iam.gserviceaccount.com)?'
    prompt_for blobstore:gcp_json_key secret-block \
      'What is the Cloud Storage Service Account (JSON) Key?'

    move_secrets_to_credhub blobstore:gcp_project_name gcs_project
    move_secrets_to_credhub blobstore:gcp_client_email gcs_service_account_email
    move_secrets_to_credhub blobstore:gcp_json_key     gcs_service_account_json_key
    ;;
  gcpaccess)
    use_blobstore=gcp
    prompt_for blobstore:gcp_access_key secret-line \
      'What is your Google Cloud Storage access key?'
    prompt_for blobstore:gcp_secret_key secret-line \
      'What is your Google Cloud Storage secret access key?'

    move_secrets_to_credhub blobstore:gcp_access_key blobstore_access_key_id
    move_secrets_to_credhub blobstore:gcp_secret_key blobstore_secret_access_key
    ;;
  esac

  ;;

*)
  ask_for_haproxy
  ask_for_database
  ;;
esac;

if [[ -z $use_blobstore ]]; then
  use_blobstore=local
fi

prompt_for use_autoscaler boolean \
  'Would you like to use App Autoscaler to dynamically scale CF applications?'

echo
echo "Your Cloud Foundry instance needs a base domain, from which all the"
echo "other endpoint URLs and domains will be fashioned."
echo

ok=
while [[ $ok != "true" ]]; do
  prompt_for base_domain line \
    "What is the base domain of your Cloud Foundry?"

      echo
  describe "Using the base domain of #C{$base_domain},"
      echo "you will get the following domains and endpoints:"
      echo
  describe "    apps: https://APP-NAME.#M{run}.#C{$base_domain}"
  describe "  cf api: https://#M{api.system}.#C{$base_domain}"
  describe "     uaa: https://#M{uaa.system}.#C{$base_domain}"
  describe "          https://#M{login.system}.#C{$base_domain}"
      echo

  prompt_for ok boolean \
    'Is this acceptable?'
done

(
echo "---"
echo "kit:"
echo "  name:    $GENESIS_KIT_NAME"
echo "  version: $GENESIS_KIT_VERSION"
echo "  features:"
for feature in "${features[@]}" ; do
  echo "    - $feature"
done

echo
echo "params:"
echo "  env:   $GENESIS_ENVIRONMENT"
echo
echo "  # Cloud Foundry base domain"
echo "  base_domain: $base_domain"

case $use_db in
mysql-db)
  echo
  echo "  # External MySQL configuration"
  echo "  external_db_host: $db_host"
  ;;

postgres-db)
  echo
  echo "  # External PostgreSQL configuration"
  echo "  external_db_host: $db_host"
  ;;

local-ha-db)
  echo
  echo "  # VIP for the HA Postgres DB"
  echo "  postgres_vip: $postgres_vip"
esac

if [[ -z $use_provided_cert ]]; then
  echo "  # Skip SSL validation since we use self-signed certs"
  echo "  skip_ssl_validation: true"
fi
) >$GENESIS_ROOT/$GENESIS_ENVIRONMENT.yml

prompt_for edit boolean \
	'Would you like to edit the environment file?'
if [[ $edit = 'true' ]]; then
	exec ${EDITOR:-vim} $GENESIS_ROOT/$GENESIS_ENVIRONMENT.yml
fi

# vim:foldmethod=marker
