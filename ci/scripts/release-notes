#!/usr/bin/perl
use warnings;
use strict;
use YAML qw(LoadFile);
use JSON::PP qw(decode_json);
use File::Find;

my (%CORE, %BUILDPACKS);

my @months = qw(ignored January February March April May June July August September October November December);
sub github {
	my $url = shift;
	my ($org, $repo, $tag) = ($url =~ m{github.com/(.*?)/(.*?)/releases/tag/(.*?)$});

	my $out = qx(curl -Ls -H 'Authorization: token $ENV{GITHUB_ACCESS_TOKEN}' https://api.github.com/repos/$org/$repo/releases/tags/$tag);
	my $data = decode_json($out);
	return "-" unless $data->{published_at};
	my ($year, $mon, $day) = ($data->{published_at} =~ m/^(\d{4})-(\d{2})-(\d{2})/);

	return "$day $months[$mon] $year";
}

my $upstream = LoadFile("ci/upstream.yml");
my $releases = LoadFile("manifests/cf/releases.yml");

my %versions;
my %found;
find(sub {
		return unless m/\.yml$/;
		printf STDERR "reading $File::Find::name ...\n";
		my $data = LoadFile($_);
		if ($data->{releases}) {
			for my $r (@{$releases->{releases}}) {
				$versions{$r->{name}} = $r->{version};
				$found{$r->{name}} = 1;
			}
		}
	}, "manifests");

for my $c (@{$upstream->{core}}) {
	delete $found{$c->{name}};
	die "core component '$c->{name}' not found in manifest 'releases:' stanza...\n"
		unless $versions{$c->{name}};
}

for my $bp (@{$upstream->{buildpacks}}) {
	delete $found{$bp->{name}.'-buildpack'};
	die "buildpack '$bp->{name}' not found in manifest 'releases:' stanza...\n"
		unless $versions{$bp->{name}.'-buildpack'};
}

if (%found) {
	for (sort keys %found) {
		printf STDERR "no ci/upstream.yml entry found for '$_'\n";
	}
	die "update ci/upstream.yml before continuing...\n";
}

print "\n\n";
print "# Core Components\n\n";
print "| Release | Version | Release Date |\n";
print "| ------- | ------- | ------------ |\n";
for my $c (@{$upstream->{core}}) {
	$c->{label} ||= $c->{name};
	if ($c->{notes}) {
		(my $url = $c->{notes}) =~ s/\${version}/$versions{$c->{name}}/g;
		my $dated = ($url =~ m/github.com/) ? github($url) : '-';
		print "| $c->{label} | [$versions{$c->{name}}]($url) | $dated |\n";
	} else {
		print "| $c->{label} | $versions{$c->{name}} | - |\n";
	}
}

print "\n\n";
print "# Buildpacks\n\n";
print "| Release | Version | Release Date |\n";
print "| ------- | ------- | ------------ |\n";
for my $bp (@{$upstream->{buildpacks}}) {
	$bp->{label} ||= $bp->{name};
	$bp->{name} .= '-buildpack';
	(my $url = $bp->{notes}) =~ s/\${version}/$versions{$bp->{name}}/g;
	my $dated = ($url =~ m/github.com/) ? github($url) : '-';
	print "| $bp->{label} | [$versions{$bp->{name}}]($url) | $dated |\n";
}
