#!/usr/bin/perl
use warnings;
use strict;
use YAML qw(LoadFile);
use JSON::PP qw(decode_json);
use File::Find;
use Data::Dumper;

sub print_table {
	my ($title, $table) = @_;
	my $width = {label => 7, version => 7, dated => 12};
	for my $row (@$table) {
		$width->{$_} = (sort{$b <=> $a} (length($row->{$_}), $width->{$_}))[0] for (keys %$row);
	}
	print "\n\n";
	print "# $title\n\n";
	printf "| %-*s | %-*s | %-*s |\n", $width->{label}, "Release", $width->{version}, "Version", $width->{dated}, "Release Date";
	printf "| %s | %s | %s |\n", "-" x $width->{label}, "-" x $width->{version}, "-" x $width->{dated};
	for my $row (@$table) {
		printf "| %-*s | %-*s | %-*s |\n", $width->{label}, $row->{label}, $width->{version}, $row->{version}, $width->{dated}, $row->{dated};
	}
}

my (%CORE, %BUILDPACKS);
if (!$ENV{GITHUB_ACCESS_TOKEN}) {
	print STDERR "Please set \$GITHUB_ACCESS_TOKEN in your environment...\n";
	exit 1;
}

my @months = qw(ignored January February March April May June July August September October November December);
sub github {
	my $url = shift;
	my ($protocol,$org, $repo, $tag) = ($url =~ m{^(.*?)github.com/(.*?)/(.*?)/releases/tag/(.*?)$});

	my $out = qx(curl -Ls -u "$ENV{GITHUB_ACCESS_TOKEN}:" https://api.github.com/repos/$org/$repo/releases/tags/$tag);
	my $data = decode_json($out);
	if (defined($data->{message}) && $data->{message} eq "Not Found") {
		$out = qx(curl -Ls -u "$ENV{GITHUB_ACCESS_TOKEN}:" https://api.github.com/repos/$org/$repo/releases/tags/v$tag);
		$data = decode_json($out);
		$url = "${protocol}github.com/$org/$repo/releases/tag/v$tag";
	}

	return ($url, "-") unless $data->{published_at};
	my ($year, $mon, $day) = ($data->{published_at} =~ m/^(\d{4})-(\d{2})-(\d{2})/);

	return ($url,"$day $months[$mon] $year");
}

my %versions;
my %found;
find(sub {
		return unless m/\.yml$/;
		printf STDERR "reading $File::Find::name ...\n";
		my $data = LoadFile($_);
		if ($data->{releases}) {
			for my $r (@{$data->{releases}}) {
				printf STDERR "  found $r->{name} v$r->{version}\n";
				$versions{$r->{name}} = $r->{version};
				$found{$r->{name}} = 1;
			}
		}
	}, "manifests");

printf STDERR "checking ci/upstream.yml for more details...\n";
my $upstream = LoadFile("ci/upstream.yml");
for my $c (@{$upstream->{core}}) {
	delete $found{$c->{name}};
	die "core component '$c->{name}' not found in manifest 'releases:' stanza...\n"
		unless $versions{$c->{name}};
}

if (exists $upstream->{buildpacks}) {
	for my $bp (@{$upstream->{buildpacks}}) {
		delete $found{$bp->{name}.'-buildpack'};
		die "buildpack '$bp->{name}' not found in manifest 'releases:' stanza...\n"
			unless $versions{$bp->{name}.'-buildpack'};
	}
}

if (%found) {
	for (sort keys %found) {
		printf STDERR "no ci/upstream.yml entry found for '$_'\n";
	}
	die "update ci/upstream.yml before continuing...\n";
}
my @table = ();
for my $c (@{$upstream->{core}}) {
	my $label = $c->{label} || $c->{name};
	my $version = $versions{$c->{name}};
	my $dated = '-';
	if ($c->{notes}) {
		(my $url = $c->{notes}) =~ s/\$\{version}/$versions{$c->{name}}/g;
		($url, $dated) = github($url) if ($url =~ m/github.com/);
		$version = "[$version]($url)";
	}
	push (@table, {"label" => $label, "version" => $version, "dated" => $dated});
}
print_table "Core Components", \@table;

if (exists $upstream->{buildpacks}) {
	@table = ();
	for my $bp (@{$upstream->{buildpacks}}) {
		my $label = $bp->{label} || $bp->{name};
		$bp->{name} .= '-buildpack';
		my $version = $versions{$bp->{name}};
		my $dated = '-';
		if ($bp->{notes}) {
			(my $url = $bp->{notes}) =~ s/\$\{version}/$versions{$bp->{name}}/g;
			($url, $dated) = github($url) if ($url =~ m/github.com/);
			$version = "[$version]($url)";
		}
		push (@table, {"label" => $label, "version" => $version, "dated" => $dated});
	}
	print_table "Buildpacks", \@table;

}
